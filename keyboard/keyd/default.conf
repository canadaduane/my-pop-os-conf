# Mac-Like Configuration Example
#
# Uses "Alt" button to the left of spacebar as "Cmd" key
#
[ids]
*

[main]
# Create a new "Cmd" button, with various Mac OS-like features below
leftalt = layer(meta_mac)

# Swap meta/alt
leftmeta = layer(alt_mac)

# Use 'capslock' as both esc + control (just like xcape)
capslock = overload(ctrl_vim, esc)

# Also add a little vim-like navigational ease when holding caps+hjkl
[ctrl_vim:C]
h = C-pageup
j = pagedown
k = pageup
l = C-pagedown

[alt_mac:A]

# meta_mac modifier layer; inherits from 'Ctrl' modifier layer
#
# The main part! Using this layer, we can remap our new "Cmd" key to
# do almost everything our muscle memory might need...
[meta_mac:C]
shift = layer(meta_mac_shift)
# Move cursor to beginning of line
left = home
# Move cursor to end of Line
right = end
# Quit application
q = G-f4

# Meta-Space: Open the Launcher (a feature of gnome-shell)
# keybinding: "Naviage applications and windows -> Launch and switch applications"
space = M-/

# As soon as tab is pressed (but not yet released), we switch to the
# "app_switch_state" overlay where we can handle Meta-Backtick differently.
# Also, send a 'M-tab' key tap before entering app_switch_sate.
tab = swap2(app_switch_state, M-tab)

# Meta-Backtick: Switch to next window in the application group
# - M-` is the default binding for 'switch-group' in gnome
# - keybinding: `gsettings get org.gnome.desktop.wm.keybindings switch-group`
` = M-`


[meta_mac_shift:C-S]
# Highlight to beginning of line
left = S-home
# Highlight to end of Line
right = S-end



# app_switch_state modifier layer; inherits from 'Meta' modifier layer
[app_switch_state:M]

# Meta-Tab: Switch to next application
# - keybinding: `gsettings get org.gnome.desktop.wm.keybindings switch-applications`
tab = M-tab
right = M-tab

# Meta-Backtick: Switch to previous application
# - keybinding: `gsettings get org.gnome.desktop.wm.keybindings switch-applications-backward`
` = M-S-tab
left = M-S-tab

